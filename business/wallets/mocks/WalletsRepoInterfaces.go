// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import wallets "currency-exchange/business/wallets"

// WalletsRepoInterfaces is an autogenerated mock type for the WalletsRepoInterfaces type
type WalletsRepoInterfaces struct {
	mock.Mock
}

// CreateWallets provides a mock function with given fields: ctx, createTableWallet
func (_m *WalletsRepoInterfaces) CreateWallets(ctx context.Context, createTableWallet *wallets.Domain) (wallets.Domain, error) {
	ret := _m.Called(ctx, createTableWallet)

	var r0 wallets.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *wallets.Domain) wallets.Domain); ok {
		r0 = rf(ctx, createTableWallet)
	} else {
		r0 = ret.Get(0).(wallets.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wallets.Domain) error); ok {
		r1 = rf(ctx, createTableWallet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWallets provides a mock function with given fields: ctx, id
func (_m *WalletsRepoInterfaces) DeleteWallets(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWallets provides a mock function with given fields: ctx
func (_m *WalletsRepoInterfaces) GetAllWallets(ctx context.Context) ([]wallets.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []wallets.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []wallets.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallets.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
