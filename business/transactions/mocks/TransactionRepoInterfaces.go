// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import transactions "currency-exchange/business/transactions"

// TransactionRepoInterfaces is an autogenerated mock type for the TransactionRepoInterfaces type
type TransactionRepoInterfaces struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: domain
func (_m *TransactionRepoInterfaces) CreateTransaction(domain transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(domain)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(transactions.Domain) transactions.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transactions.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionRepoInterfaces) DeleteTransaction(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransaction provides a mock function with given fields: ctx
func (_m *TransactionRepoInterfaces) GetAllTransaction(ctx context.Context) ([]transactions.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []transactions.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
